9_SAS On Introduction to IP
Self -Assessment Sheet

1. What is Internet Protocol (IP)?
It is a core and fundamental protocol or set of rules that handles all of the data to send or receive packets across different networks (the internet, a network) that uses and acknowledges IP communication.
It enables communication between devices and routes data packets between them. It assigns unique IP addresses to every device.
In the context of this video, the IP is the truck, the boxes are the UDP / TCP data, the structured path taken to communicate data between devices in the network is the road or network topology, and the IP address is the unique identifier assigned to each device on the network or the house / house address, and the rooms in the house carry specific port numbers that is shared with the IP to deliver specific data in a specific location.
2. What is the meaning of Encapsulation?
The exact structure of how I defined data to be structured in the last paragraphs of question 1 and question 16.
“We would place that box inside of a truck. That truck would then move across the network and on the other side, we remove the box from the truck. We open up the box and we take out the application data”
It is the process of wrapping data from higher level protocols within lower level protocols as it travels across and delivers data throughout complex network environments. It is important in network communication because it allows these protocols to work together to do so.
For example, TCP and UDP data (boxes) are transported inside of an IP packet (truck). They are encapsulated within IP.
3. What does TCP stand for?
Transmission control protocol
4. How does TCP (Transmission Control Protocol) work?
It is a common way to move data between a network. It is a protocol encapsulated within the IP protocol.
It is a connection oriented protocol - formal connection to setup and close data flow. It is also considered “reliable” delivery. TCP has a built in system that makes sure data is verified that it is retrieved. This allows error recovery. It can manage out of -order messages which happen when there are multiple links to one location, or retransmissions as well. That way if data fails to be retrieved, it is resent. There is also a flow control mechanism that can manage data if it is being sent too fast.
Examples of protocols that use TCP are HTTPS and SSH. TCP handles communication problems and the applications (protocols) using TCP don’t have to worry about these data communication issues. It is handled automatically by TCP, like if a web server communicating to a client misses data packets then TCP will handle this retransmission of data.
5. What does UDP stand for?
User datagram protocol
6. How does UDP (User Datagram Protocol) work?
It is a common way to move data between a network. It is a protocol encapsulated within the IP protocol.
TCP is a connection oriented protocol, while UDP is connectionless. There is no formal process to open and close the connection, meaning you cannot set up traffic flow nor tear it down at the end of the process. It sends data from one place to another and is a simple method to send that information across networks.
It is considered “unreliable” delivery since the receiving end does not have the acknowledgement of data. This only means there is no knowledge of data being retrieved on the destination device. Therefore as TCP has the flow control, retransmission, reorder message features, UDP does not have those. It is only one device (sender) communicating with the receiving device.
In theory UDP seems less useful than TCP, but UDP is useful in certain situations of data communicating between devices. UDP is good for sending information quickly since there is no flow control. An example is phone conversation. There is no need to rewind packets of data that may have been missed, instead you keep communicating. UDP simply sends data from one side to the other.
Examples of protocols that use UDP are DHCP (IP address assigning) and TFTP. If data does not get through, the application (such as DHCP) is responsible for making sure the information is received. If it isn’t, DHCP will resend this data over the network. UDP cannot do this.
-
7. What is OSI Layer 4?
8. What does OSI Layer 4 - Transport Layer do?
9. What is Multiplexing?
OSI (Open Systems Interconnection) model is another model that breaks down the TCP/IP model into additional layers. It helps visualize and communicate how networks operate and isolate / troubleshoot networking issues. The modern internet is based on TCP/IP, but the 7-layer OSI model is still used.
OSI layer 4 is the 4th layer in this model, also known as the transport layer. This layer is responsible for making sure there is reliable and efficient communication between apps / processes running on different devices.
In simple terms it transmits data using protocols including TCP and UDP, which is why someone may refer to these protocols as operating at the transport layer of the OSI model (OSI Layer 4).
This layer breaks down data into segments, then is responsible for reassembling this data. This is taken initially from the session layer (OSI model) on the transmitting end and is reassembled on the receiving end, converted back into data for the session layer.
This layer has several key functions for example: the segmentation and reassembly as I mentioned above, flow control to regulate data between sender / receiver to prevent overwhelming data, and multiplexing / demultiplexing which allows multiple applications / processes to run on the same device and establish simultaneous connection with different devices.
This multiplexing is in reference to the port numbers I mention which is the identifier for routing specific data to a specific app / process on the receiving end. The home / IP address is receiving multiple boxes and the port number allows us to know what service will accept this data.
The example of multiplexing in the video is if your system communicates multiple applications’ data to a server at the same time, and the applications on the server are able to retrieve the relevant data simultaneously.
This is why UDP and TCP are useful in a process that IP cannot handle by itself alone.
-
-
10. What is a port?
11. What is a Port Number?
12. What does IPv4 Socket consist of?
13. What are Non-Ephemeral Ports?
14. What are Ephemeral Ports?
15. What is Data Transport Analogy?
A port is the communication endpoint that is used to identify a process or application running on a device in a network. It enables multiple processes on a single device to communicate with other devices over the network.
A port number is the numeric identification that specifies the communication endpoint in a network. It is important in addressing networks where information is routed on a device (home address -> room) (IP address -> application / service). This is associated with transport layer protocols like TCP and UDP.
These ports are identified with numbers (port numbers) which range from 0 - 65,535. TCP and UDP ports can be any of these numbers, but TCP has its own set of port numbers that differ from UDP port numbers. There could be a service running on TCP port 80 but a different service on UDP port 80. This could lead to confusion which is why this isn’t done in normal operations.
There are 3 categories for port numbers :
Well known ports (0-1023) - port numbers reserved for common services / protocols. Examples : Port 80 is for HTTP, 443 is HTTPS (web servers), 25 for SMTP. These are also known as non-ephemeral ports or permanent port numbers. If our client is communicating with a web server, that web server will use a common or permanent port across all devices like 80 or 443. Every web server will use the same ports. If they didn’t we would need an additional process to determine which port number is correlated with that specific website. This is what makes the well-known ports easy and simple to use across multiple devices and removes complications.
Registered ports (1024-49151) - These are assigned by the Internet Assigned Numbers Authority (IANA) to specific services / applications when requested. These are used by less common services / apps.
Dynamic / private ports (49152-65535) - These port numbers are available to use dynamically, meaning they are not assigned to any particular service or application.
The registered and dynamic / private ports (1024-65535) are also referred to as ephemeral ports or temporary port numbers. Our client will need a port number to communicate with servers. That will be temporary since we need one to communicate with the server temporarily and we will not need it afterwards. The numbers assigned here are configured by the operating system and will be assigned when using these applications.
Most servers use these non-ephemeral port numbers but that isn’t always the case which is why we have the ephemeral port numbers which change from one device to another. These are just numbers that are used for communicating data with a service. Port numbers are not used for security even if you think you can change it to something no one will find. That is not intended in the design for port numbers, the design is for communication.
Over the IP (truck), the data sent between devices over a network (road) when both receiver and sender have an IP address (home address) and port number (room in house), this combination is known as a socket. This allows for end-to-end communication between apps / processes on different devices. When there are different port numbers, the devices on the network can differentiate the different types of data and route that information to the appropriate location (application / service. This allows for simultaneous communication between multiple applications running on a single device and this creates the concept of multiplexing and demultiplexing of data on the network.
In the video reference, we have the IP delivery truck which is traversing across a network (road). The sender and receiver both have an IP address, and they both have a port number (home address, home room). This data (UDP/TCP, ports, IP address) is encapsulated within packets. This combination of IP addresses and port numbers is known as a socket. The UDP / TCP data is considered the boxes in the truck. Once the truck travels across the road to the home address (encapsulated data -> travels network encapsulated -> receiving IP address), the data is de-encapsulated and then the port number determines where this data will arrive in the house. The real example is if we have a server receiving data, which application on the server will receive this data? The port number will determine this. If we have 4 different services running on the same IP address (receiving home address / IP address) {for example, 2 web servers (unencrypted, encrypted), a mail server, a time server}, these boxes (data packets) are sent to the appropriate location (application) in the house (IP address). This is the concept of multiplexing since there is not always only one set of data coming in. There is not only one box coming to the house. The port number will help determine what service on the device will receive which data.
The IPv4 socket consists of the IP address and port number like I mentioned. This will form a unique identification for a communication endpoint in a network. The IP address is the unique location / device communicating in a network, and the port number establishes a process/service/application that is receiving data. The port number will allow for multiplexing multiple streams of data communication on a single IP address. The data that is sent over a network using the IPv4 is encapsulated into packets. These packets contain the IP addresses and port numbers and again this combination is known as a socket.
This socket combination of IP addresses and port numbers will help the different processes on different devices in a network. It establishes unique identification of devices and applications / processes on that device and allows for multiplexing features.
The IPv4 sockets will contain the server IP address, protocol (TCP, UDP, and server application port number {such as port 80 HTTP on a server for web server data}). It will also contain the client’s IP address, protocol, and client port number.
Refer to port categories above (number label 1-4) for information about non-ephemeral and ephemeral ports (permanent, temporary port numbers) (well-known port numbers, registered port numbers, dynamic / private port numbers).
-
16. What is Network Topology?
In basic terms, it is the road that is taken to transport data in a network between devices. Different topologies have different structures of these connected devices and routed data.
It is the physical or logical arrangement of devices, nodes, components connected in a network. It sets a certain structure for how the devices are connected and how data is shared between the network. There are multiple topologies used based on several factors such as the costs, size of network, ease to install, efficiency of network, and other requirements that meet specific demands and budget of a network installation.
For example a switch is a central hub where all data is routed to the connected devices. This is a star topology. Mesh topology is when all devices are connected to each other and can communicate with each other.
In this video's analogy, the truck is the IP and the road is the network topology (could be WIFI using mesh topology, or an ethernet switch using mesh, bus, or star topology). The data that is held in this IP truck are boxes of TCP and/or UDP data (another protocol that works in conjunction with IP). Inside these boxes can be more information such as application data or some network function. The truck takes the road to deliver boxes to a house, which is the unique IP address. To deliver the boxes to specific rooms, that is where UDP and TCP come in as they carry port numbers that deliver this data (boxes) to specific rooms and unload data such as specific application data.
EXTRA


These images depict very well the scenarios described so far (video 15:56 -> end of video). We have 2 IP addresses, multiple source and destination ports, different kinds of data / applications on the server, both UDP and TCP data.
This displays the concepts of everything discussed so far such as an IP truck taking a road / network topology to deliver TCP / UDP boxes that inside contain more data such as HTTP, VoIP, and Email data. All of this data is encapsulated in packets and is de-encapsulated at the receiver. The concept of multiplexing is here, and the concept of sockets is present. Both temporary and permanent ports are in use.
